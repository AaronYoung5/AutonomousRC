// Generated by gencpp from file common_srvs/ConeMapResponse.msg
// DO NOT EDIT!


#ifndef COMMON_SRVS_MESSAGE_CONEMAPRESPONSE_H
#define COMMON_SRVS_MESSAGE_CONEMAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Cone.h>
#include <common_msgs/Cone.h>
#include <common_msgs/Cone.h>

namespace common_srvs
{
template <class ContainerAllocator>
struct ConeMapResponse_
{
  typedef ConeMapResponse_<ContainerAllocator> Type;

  ConeMapResponse_()
    : blue_cones()
    , yellow_cones()
    , orange_cones()  {
    }
  ConeMapResponse_(const ContainerAllocator& _alloc)
    : blue_cones(_alloc)
    , yellow_cones(_alloc)
    , orange_cones(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::common_msgs::Cone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::Cone_<ContainerAllocator> >::other >  _blue_cones_type;
  _blue_cones_type blue_cones;

   typedef std::vector< ::common_msgs::Cone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::Cone_<ContainerAllocator> >::other >  _yellow_cones_type;
  _yellow_cones_type yellow_cones;

   typedef std::vector< ::common_msgs::Cone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::Cone_<ContainerAllocator> >::other >  _orange_cones_type;
  _orange_cones_type orange_cones;





  typedef boost::shared_ptr< ::common_srvs::ConeMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_srvs::ConeMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConeMapResponse_

typedef ::common_srvs::ConeMapResponse_<std::allocator<void> > ConeMapResponse;

typedef boost::shared_ptr< ::common_srvs::ConeMapResponse > ConeMapResponsePtr;
typedef boost::shared_ptr< ::common_srvs::ConeMapResponse const> ConeMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_srvs::ConeMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_srvs::ConeMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/aaron/AutonomousRC/catkin_ws/src/common/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_srvs::ConeMapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_srvs::ConeMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_srvs::ConeMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7e5900e2ea08a404fe38a8b59685279";
  }

  static const char* value(const ::common_srvs::ConeMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7e5900e2ea08a40ULL;
  static const uint64_t static_value2 = 0x4fe38a8b59685279ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_srvs/ConeMapResponse";
  }

  static const char* value(const ::common_srvs::ConeMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Cone[] blue_cones\n"
"common_msgs/Cone[] yellow_cones\n"
"common_msgs/Cone[] orange_cones\n"
"\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/Cone\n"
"uint8 BLUE=0\n"
"uint8 YELLOW=1\n"
"uint8 ORANGE=2\n"
"\n"
"geometry_msgs/Point position\n"
"uint8 color\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::common_srvs::ConeMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blue_cones);
      stream.next(m.yellow_cones);
      stream.next(m.orange_cones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_srvs::ConeMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_srvs::ConeMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "blue_cones[]" << std::endl;
    for (size_t i = 0; i < v.blue_cones.size(); ++i)
    {
      s << indent << "  blue_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "    ", v.blue_cones[i]);
    }
    s << indent << "yellow_cones[]" << std::endl;
    for (size_t i = 0; i < v.yellow_cones.size(); ++i)
    {
      s << indent << "  yellow_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "    ", v.yellow_cones[i]);
    }
    s << indent << "orange_cones[]" << std::endl;
    for (size_t i = 0; i < v.orange_cones.size(); ++i)
    {
      s << indent << "  orange_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "    ", v.orange_cones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_SRVS_MESSAGE_CONEMAPRESPONSE_H
